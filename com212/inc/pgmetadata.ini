<?php
class PgMetaData {
  var $md;	// テーブルのメタデータ([カラム番号][メタデータ]の2次元配列)
  /* メタデータは以下：
     name: カラム名
     typename: データ型名
     len: 内部データ長(バイト数,可変長データは-1)
     modifier: 型修飾子
     notnull: NOT NULLなら t そうでないなら f
     hasdefault: デフォルト値があれば t : なければ f
     defaultval: デフォルト値
     constraint: 制約
     */     
		
  var $aliases = "";	// カラムの別名連想配列([カラム名][別名])
  var $is_print_type_name = false;	// データ型名の表示有無
  var $is_print_opr_desc = false;	// オペレータの説明の表示有無
  var $table_name;	// テーブル名
  var $table_oid;	// テーブルの Oid
  var $table_constraints = "";	// テーブル制約

  // テーブルの情報を得る
  function getMetaData($table) {
    $result = pg_exec("select oid from pg_class where relname = '$table'");
    if ($result == false) {
      exit;
    }
    $this->table_oid = pg_result($result,0,0);
    // 制約を pg_relcheck から取得
//    $result = pg_exec("select rcname,rcsrc from pg_relcheck where rcrelid = $this->table_oid");
    $result = pg_exec("select conname,consrc from pg_constraint where conrelid = $this->table_oid");    if ($result == false) {
      $msg = sprintf("テーブル %s の制約値が取れません。",$table);
      print("$msg");
      exit;
    }
    $rows = pg_numrows($result);

    // 連想配列に制約名と制約値を格納
    for ($i=0;$i<$rows;$i++) {
      $constraints[$i]["conname"] = pg_result($result,$i,0);	// 制約名
      $constraints[$i]["consrc"] = pg_result($result,$i,1);	// 制約
    }
    pg_freeresult($result);

    $sql = sprintf("select a.attnum, a.attname, t.typname, a.attlen, a.atttypmod, a.attnotnull, a.atthasdef from pg_attribute a, pg_type t WHERE a.attnum > 0 and a.attrelid = %d and a.atttypid = t.oid order by a.attnum", $this->table_oid);
    $result = pg_exec($sql);
    if ($result == false) {
      exit;
    }
    $rows = pg_numrows($result);

    for ($i=0;$i<$rows;$i++) {
/*
    $mystring = "S,4,5,9,13,21,22,23,24,25,27,28,29,35,36,38,39,40,49,50,51,65,";
    $stri = "," . $i . ",";
    $pos = strpos($mystring ,$stri);
 //   if ($pos > 0)  { // 表示
*/
      $this->md[$i][name] = pg_result($result,$i,1);
      $this->md[$i][typename] = pg_result($result,$i,2);
      $this->md[$i][len] = pg_result($result,$i,3);
      $this->md[$i][modifier] = pg_result($result,$i,4);
      $this->md[$i][notnull] = pg_result($result,$i,5);
      $this->md[$i][hasdefault] = pg_result($result,$i,6);
/*
    }
*/
      // デフォルト値を pg_attrdef から取得
      if ($this->md[$i][hasdefault] == "t") {
	$adnum = $i + 1;
	$result2 = pg_exec("select adsrc from pg_attrdef where adrelid = $this->table_oid and adnum = $adnum");
	if ($result2 == false || pg_numrows($result2) == 0) {
	  $msg = sprintf("テーブル %s の カラム %s のデフォルト値が取れません。",$table, $this->md[$i][name]);
	  print("$msg");
	  exit;
	}
	$this->md[$i][defaultval] = pg_result($result2,0,0);
	pg_freeresult($result2);
      }

      // カラム制約
      if (is_array($constraints)) {
	// カラム制約の名前は「テーブル名_カラム名」
	$colname = $table . "_" . $this->md[$i][name];
	for ($j=0;$j<count($constraints);$j++) {
	  if ($constraints[$j]["conname"] == $colname) {
	    $this->md[$i][constraint] = $constraints[$j]["consrc"];
	    $constraints[$j]["conname"] = "";	// チェック済の制約名を無効にする
	    break;
	  }
	}
      }
    }
    pg_freeresult($result);
    $this->table_name = $table;

    // カラム制約をすべて無効にし、残ったのがテーブル制約
    if (is_array($constraints)) {
      for ($j=0;$j<count($constraints);$j++) {
	$conname = $constraints[$j]["conname"];
	if ($conname) {
	  $this->table_constraints[$conname] = $constraints[$j]["consrc"];
	}
      }
    }
    return($this->md);
  }

  // 別名の設定
  function setAliases($aliases) {
    $this->aliases = $aliases;
  }

  // 別名の取り出し
  function getAliases() {
    return($this->aliases);
  }

  // データ型名の表示有無モードの設定
  function setColumnPrintType($print) {
    $this->is_print_type_name = $print;
  }

  // オペレータの説明の表示有無モードの設定
  function setOpPrintDesc($print) {
    $this->is_print_opr_desc = $print;
  }

  // オペレータに関する情報の取得
  // $n: カラム番号
  // 戻り値: [オペレータの通番][情報名]
  // 情報名: name: オペレータ名, desc： オペレータの説明
  function getOperator($n) {
    $sql = "select o.oprname AS op,t1.typname AS left_arg, t2.typname AS right_arg, t0.typname AS result, obj_description(p.oid) as description from pg_proc p, pg_type t0, pg_type t1, pg_type t2,pg_operator o where t1.typname = '";
    $sql = $sql . $this->md[$n][typename];
    $sql = $sql . "' and p.prorettype = t0.oid and RegprocToOid(o.oprcode) = p.oid and p.pronargs = 2 and o.oprleft = t1.oid and o.oprright = t2.oid and t0.typname = 'bool' and t1.typname = t2.typname";

    $result = pg_exec($sql);
    if ($result == false) {
      exit;
    }
    $rows = pg_numrows($result);
    for ($i=0;$i<$rows;$i++) {
      $op[$i][name] = pg_result($result,$i,0);
      $op[$i][desc] = pg_result($result,$i,4);
    }
    pg_freeresult($result);
    return($op);
  }

  // <form action=...><table> の表示
  function printFormHeader() {
    global $PHP_SELF;
    print("<form action=\"$PHP_SELF\" method=\"post\">");
    print("<table>\n");
  }

  // </table><input type=submit...></form> の表示
  function printFormFooter() {
    print("</table>\n");
    print("<input type=\"submit\" value=\"検索開始\">\n");
    print("<input type=\"reset\" value=\"クリア\">\n");
    print("</form>\n");
  }

  // <form action=...><tabl> の表示
  function printDataInputFormHeader() {
    global $PHP_SELF;
//    print("<form action=\"$PHP_SELF\" method=\"post\" >\n");
    print("<form action=\"$_GET[PHP_SELF]\" method=\"post\" >\n");
    print("<table border>\n");
    print("<tr><th>項目名</th><th>データ</th>");
    print("\n");
  }

  // </table><input type=submit...></form> の表示
  function printDataInputFormFooter($mode) {
    print("</table>\n");

    if (is_array($this->table_constraints)) {
//      print("<table border>\n");
//      print("<tr><th>テーブル制約名</th><th>制約</th></tr>\n");
//      while (list($name, $val) = each($this->table_constraints)) {
//	$val = htmlspecialchars($val);
//	print("<tr><tr><td>$name</td><td>$val</td></tr>\n");
//      }
    }
//    print("</table>\n");
    if ($mode == "inputForm") {
      print("<input type=\"submit\" value=\"登録\">\n");
    } else {
      print("<input type=\"submit\" name=\"update\" value=\"更新\" onClick=\"return formConfirm('update')\">\n");
//      print("<input type=\"submit\" name=\"delete\" value=\"削除\" onClick=\"return formConfirm('delete')\">\n");
    }
    print("<input type=\"reset\" value=\"クリア\">\n");
    print("</form>\n");
  }


  // 列名の表示
  function printAttrName($atrnumber, $atrname) {
    if ($this->is_print_type_name == false) {
      print("<td>$atrname</td>");
    } else {
      $typename = $this->md[$atrnumber][typename];
      print("<td>$atrname($typename)</td>");	  
    }
  }

  // 検索フォームの生成
  function printForm() {
    if (is_array($this->md) == false) {
      return;
    }

    // <form action=...><tabl> の表示
    $this->printFormHeader();

    $n = count($this->md);
    for ($i=0;$i<$n;$i++) {

      print("<tr>");

      $name = $this->md[$i]["name"];
      if (is_array($this->aliases)) {
	$atrname = $this->aliases[$name];
      } else {
	$atrname = $name;
      }
      $this->printAttrName($i, $atrname);
      $this->printOprName($name, $this->getOperator($i));

      print("<td><input type=\"text\" name=\"atrlist[$name]\"></td>\n");
      print("</tr>\n");
    }
    print("<input type=\"hidden\" name=\"__table_name__\" value=\"$this->table_name\">\n");
    $this->printFormFooter();
  }

  // SQL文の生成
  function makeSQL($order_by = "", $updatable = false) {
    global $atrlist, $oplist, $__table_name__;

    $sql = "select ";
    $where = "where oid > 0 ";
    $first = true;
    $needComma = false;

    if ($updatable == true) {
      $sql .= "oid as __target_oid__ ";
      $needComma = true;
    }
    while (list($name, $val) = each($atrlist)) {
      if ($needComma == true) {
	$sql .= ",";
      }

      $sql .= "$name ";
      if (is_array($this->aliases)) {
	$alias = $this->aliases[$name];
	$sql .= "as $alias";
      }
      if ($val != "") {
	if ($name == "status" || $name == "sys_stat" || $name == "nendo") {
		$op = "=";
	} else if ($name == "reg_date") {
		$op = "between";
	} else if ($name == "chair1") {
		$op = "like or";
	} else if ($name == "enshaname1") {
		$op = "like or4";
	} else if ($name == "chair2") {
		$op = "like or6";
	} else {
		$op = "like";
	}

	// $op = $oplist[$name];
//	if ($first == false) {
	  $where .= " and";
//	}
	if ($op == "=") {
		$where .= " $name $op '$val'";
	} else if ($op == "between") {
		$where .= " ($name $op $val)";
	} else if ($op == "like or") {
//		$where .= " (chair1 like '$val%' or chair2 like '$val%')";
		$where .= " semi_id in (select semi_id from chairspeaker where cs_yakuwari = '座長' and cs_name like '$val%')";
	} else if ($op == "like or4") {
//		$where .= " (enshaname1 like '$val%' or enshaname2 like '$val%' or enshaname3 like '$val%' or enshaname4 like '$val%')";
		$where .= " semi_id in (select semi_id from chairspeaker where cs_yakuwari = '演者' and cs_name like '$val%')";
	} else if ($op == "like or6") {
//		$where .= " (chair1 like '$val%' or chair2 like '$val%' or enshaname1 like '$val%' or enshaname2 like '$val%' or enshaname3 like '$val%' or enshaname4 like '$val%')";
		$where .= " semi_id in (select semi_id from chairspeaker where cs_name like '$val%')";
	} else {
		$where .= " $name $op '%$val%'";
	}
        $first = false;
      }
      $needComma = true;
    }
/*
$sql = "select oid as __target_oid__ ,semi_id ,last_date ,kaisu ,gakkai,enshaname1 ,seminar ,kaityo ,enshaname2 ,enshaname3 ,enshaname4 ,yaku ,ryoiki ,kaisaibi ,kaisaiji ,nendo ,kaiki ,place ,syukan ,sekinin ,thema ,chair1 ,chair2 ,cyaku1 ,cyaku2 ,enshayaku1 ,enshayaku2 ,enshayaku3 ,enshayaku4 ,endai1 ,endai2 ,endai3 ,endai4 ,hotel ,hinmoku ,cltantou ,amail ,annai1 ,annai2 ,yoko ,iraijo ,oudaku ,tirasi1 ,tirasi2 ,tirasi3 ,mousi_add ,mousi_c ,mousi_k ,syoroku ,kaijo_k ,hikae_k ,hikae_a ,syuku_k ,tojitu ,cv ,sharei ,shaman1 ,shahi1 ,shaman2 ,shahi2 ,shaman3 ,shahi3 ,shaman4 ,shahi4 ,yakubun1 ,yakubun2 ,last_m ,report ,zaseki ,bento ,nyujosha ,an_kaisyu ,status ,yobi1 ,yobi2 ,yobi3 ,yobi4 ,cl1 ,cl2 ,cl3 ,sys_stat ,narabi ,schedule ,kouenkai ,corepon ,tokensave ,anquete ,syuroku ,syukan2 ,hikae_t ,sizaisu ,sizaino 
";
*/

    $sql .= " from $__table_name__ ";

    if ($where != "where") {
      $sql .= " ";
      $sql .= $where;
    }
;
    if ($order_by != "") {
      $sql .= " order by ";
      $sql .= $order_by . ",kaisu,semi_id";
    }
    return($sql);
  }

  // データ入力フォームの生成
  function printDataInputForm($mode) {
    global $oid;
    if (is_array($this->md) == false) {
      return;
    }
    
    // <form action=...><tabl> の表示
    $this->printDataInputFormHeader($mode);

    $n = count($this->md);

    for ($i=0;$i<$n;$i++) {

      print("<tr>");

      $name = $this->md[$i]["name"];
      if (is_array($this->aliases)) {
	$atrname = $this->aliases[$name] . "(" . $name . ")";
      } else {
	$atrname = $name;
      }
      print("<td>$atrname</td>\n");

      if ($mode == "updateForm") {
	$col = $this->md[$i]["name"];
//	$coltype = $this->md[$i]["typename"];
//	$sql = "select $col from $this->table_name where oid = $oid";
	$sql = "select $col from $this->table_name where oid = $_GET[oid]";

	@$result = pg_exec($sql);
	if ($result == false) {
	  printf("SQL:\"$sql\"の実行に失敗しました。");
	  exit;
	}
	if (pg_numrows($result) != 1) {
	  print("テーブルの現在の値を取得できません。");
	  exit;
	}
// koko
	$str = htmlspecialchars(pg_result($result,0,0));
	if ($i == 0) {
		print("<td><font color=red>$str</font></td>\n");
//	} else if (($i == 1) || ($i == 2) || ($i == 21)) {
//		print("<td>$str</td>\n");
//	} else if ($i == 20) { // status
//		if ($str == "0") {
//		print("<td><input type=\"radio\" name=\"atrlist[$name]\" value=\"0\" checked>有効&nbsp;<input type=\"radio\" name=\"atrlist[$name]\" value=\"1\">キャンセル");
//		}
//		if ($str == "1") {
//		print("<td><input type=\"radio\" name=\"atrlist[$name]\" value=\"0\">有効&nbsp;<input type=\"radio\" name=\"atrlist[$name]\" value=\"1\" checked>キャンセル");
//		}
	}else {
		print("<td><input type=\"text\" value=\"$str\" size=30 name=\"atrlist[$name]\"></td>\n");
	}
      } else {
	print("<td><input type=\"text\" name=\"atrlist[$name]\"></td>\n");
      }

      print("</tr>\n");
      pg_freeresult($result);
    }
    print("<input type=\"hidden\" name=\"__table_name__\" value=\"$this->table_name\">\n");
    if ($mode == "inputForm") {
      print("<input type=\"hidden\" name=\"mode\" value=\"insert\">\n");
    } else {
      print("<input type=\"hidden\" name=\"mode\" value=\"update\">\n");
      print("<input type=\"hidden\" name=\"oid\" value=$_GET[oid]>\n");
//      print("<input type=\"hidden\" name=\"oid\" value=\"$oid\">\n");
    }
    $this->printDataInputFormFooter($mode);
  }

  // データ登録SQLの作成、実行
  function insertSQL($user_check = false, $debug = false) {
    global $atrlist, $nulllist, $__table_name__;

    $sql = "insert into $__table_name__ (";
    $atrs = "";
    $vals = "";
    $needComma = false;
    $has_someval = false;

    while (list($name, $val) = each($atrlist)) {
      if ($nulllist[$name] != "") {
	continue;
      }

      $has_someval = true;

      if ($needComma == true) {
	$atrs .= ",";
	$vals .= ",";
      }
      $needComma = true;

      $atrs .= "$name ";
      $vals .= "'$val'";
    }

    if ($has_someval == false) {
      print("データが入力されていません。");
      return(false);
    }

    if ($user_check) {
      if ($user_check($atrlist) == false) {
	return(false);
      }
    }

    $sql .= "$atrs) values ($vals)";
    if ($debug == true) {
      print($sql);
    }
    return(@pg_exec($sql));
  }

  // データ変更SQLの作成、実行
  function updateSQL($user_check = false, $debug = false) {

    global $atrlist, $nulllist, $__table_name__, $oid;

    $sql = "update " . $_POST[__table_name__] . " set ";
//    $sql = "update $__table_name__ set ";
    $atrs = "";
    $vals = "";
    $needComma = false;
    $has_someval = false;

    while (list($name, $val) = each($_POST[atrlist])) {
//  while (list($name, $val) = each($atrlist)) {
// fujita add 
      if ($name == "last_update" || $name == "reg_date") {
	if (empty($val) == true) {
           continue;
	}
      }
      $has_someval = true;

      if ($needComma == true) {
	$sql .= ",";
      }
      $needComma = true;
      if ($nulllist[$name] != "") {
	$sql .= "$name = null";
      } else {
	$sql .= "$name = '$val'";
      }
    }

    if ($has_someval == false) {
      print("データが入力されていません。");
      return(false);
    }

    if ($user_check) {
      if ($user_check($atrlist) == false) {
	return(false);
      }
    }

// 2007/10/12 ADD
    $sql .= ",last_update='".date("Y-n-j")."'";

    $sql .= " where oid = $_POST[oid]";
//  $sql .= " where oid = $oid";
    if ($debug == true) {
      print($sql);
    }
    return(@pg_exec($sql));
  }

// データ削除SQLの作成、実行
  function deleteSQL($debug = false) {
    global $__table_name__, $oid;

    $sql = "delete from $__table_name__ where oid = $oid ";
    if ($debug == true) {
      print($sql);
    }
    return(@pg_exec($sql));
  }
}
